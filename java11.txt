Java 11 new features
--------------------

1. Running a java program

javac MyFirstJavaProgram.java
java MyFirstJavaProgram

Instead of compiling and running, we can directly run with below syntax:


java MyFirstJavaProgram.java

Arguments can also be passed in like with a normally compiled class, so in the below


2.Local Variable Type Inference
-----------------------------

Consider the following example, which seems redundant and is hard to read:

URL url = new URL("http://www.oracle.com/"); 
URLConnection conn = url.openConnection(); 
Reader reader = new BufferedReader(
    new InputStreamReader(conn.getInputStream()));


we can rewrite this example by declaring the local variables with the var identifier. 
The type of the variables are inferred from the context:

var url = new URL("http://www.oracle.com/"); 
var conn = url.openConnection(); 
var reader = new BufferedReader(
    new InputStreamReader(conn.getInputStream()));


Local variable declarations with initializers:
var list = new ArrayList<String>();    // infers ArrayList<String>
var stream = list.stream();            // infers Stream<String>
var path = Paths.get(fileName);        // infers Path
var bytes = Files.readAllBytes(path);  // infers bytes[]



Enhanced for-loop indexes:

List<String> myList = Arrays.asList("a", "b", "c");try (var input = 
     new FileInputStream("validation.txt")) {...}   // infers FileInputStream

for (var element : myList) {...}  // infers String



Index variables declared in traditional for loops:
for (var counter = 0; counter < 10; counter++)  {...}   // infers int


try-with-resources variable:
try (var input = 
     new FileInputStream("validation.txt")) {...}   // infers FileInputStream


3. Local variables in lambda
----------------------------

 allows the use of "var" in parameters of implicitly typed lambda expressions.

(var l, var s) -> l.add(s);
Java 11 now also allows the following, shorter variant with "var":

(@Nonnull var l, @Nullable var s) -> l.add(s);
When using var all variables must be var only, canot be mixed with var and int or without variable

The following examples are illegal:

(var x, y) -> x.process(y)         // Cannot mix 'var' and 'no var' in implicitly typed lambda expression
(var x, int y) -> x.process(y)     // Cannot mix 'var' and manifest types in explicitly typed lambda expression





4. New Collection.toArray() method
----------------------------------
List<String> list = List.of("foo", "bar", "baz");

Object[] strings1 = list.toArray();

String[] strings2a = list.toArray(new String[list.size()]);
String[] strings2b = list.toArray(new String[0]);


Since Java 11, we can also write the following:

list.stream().toArray(Generator ie., lambda expression)

ArrayList<Integer> list = new ArrayList<>();
list.add(1);
list.add(2);
sop(list)
list.stream().toArray(size->new Integer[size]);


String[] strings = list.toArray(String[]::new);

This method allows the Collection classes to create an array of the necessary size using 
the passed array constructor reference.



5. New String Methods
----------------------
In Java 11, the String class has been extended with some helpful methods:
String.strip(), stripLeading(), stripTailing()


String.isBlank()
The new String.isBlank() method returns true if and only if the String contains only those 
characters that the Character.isWhitespace() method mentioned in the previous point 
classifies as whitespaces.


import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        // Your code here!
        
        System.out.println(" ".isBlank()); //true
        
        String s = "Anupam";
        System.out.println(s.isBlank()); //false
        String s1 = "";
        System.out.println(s1.isBlank()); //true
    }
}





String.repeat()

You can use String.repeat() to repeatedly concatenate a String:

System.out.println(":-) ".repeat(10));



String.lines()

The String.lines() method splits a String at line breaks and returns a Stream of all lines.

Stream<String> lines = "foonbarnbaz".lines();
lines.forEachOrdered(System.out::println);


import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) throws Exception {
        
        String str = "JD\nJD\nJD"; 
        System.out.println(str);
        System.out.println(str.lines().collect(Collectors.toList()));
    }
}







6. Files
-----

Java 11 makes it a lot easier to read and write strings. 
The readString() and writeString() static methods are added to the Files class for this purpose.

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

public class Demo
{
	public static void main(String[] args) throws IOException
	{
		Path path = Files.createTempFile("temporaryFile", ".txt");
		//Writing to the file
		Files.writeString(path, "Hello World");
		//Reading from the file
		String s = Files.readString(path);
		System.out.print(s);
	}
}




7. The Not Predicate Method
---------------------------

A static "not" method has been added to the Predicate interface. We can use it to negate an existing predicate, 
much like the negate method:

the big advantage is that we can also use not with method references, like not(String:isBlank).

List<String> sampleList = Arrays.asList("Java", "\n \n", "Kotlin", " ");
List withoutBlanks = sampleList.stream()
  .filter(Predicate.not(String::isBlank))
  .collect(Collectors.toList());
assertThat(withoutBlanks).containsExactly("Java", "Kotlin");



8. HTTP Client
-------------

The new HTTP client from the java.net.http package was introduced in Java 9. 
It has now become a standard feature in Java 11.


    HttpClient is the entry point for utilising the API.
    HttpRequest is a request to be sent through the HttpClient.
    HttpResponse is the result of an HttpRequest call.
    WebSocket is the entry point for building up a WebSocket client.



HttpClient httpClient = HttpClient.newBuilder()
  .version(HttpClient.Version.HTTP_2)
  .connectTimeout(Duration.ofSeconds(20))
  .build();

HttpRequest httpRequest = HttpRequest.newBuilder()
  .GET()
  .uri(URI.create("http://localhost:" + port))
  .build();


HttpResponse httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

assertThat(httpResponse.body()).isEqualTo("Hello from the server!");



9. Nest Based Access Control
----------------------------

Java 11 introduces the notion of nestmates and the associated access rules within the JVM.

A nest of classes in Java implies both the outer/main class and all its nested classes:


assertThat(MainClass.class.isNestmateOf(MainClass.NestedClass.class)).isTrue();

Nested classes are linked to the NestMembers attribute, while the outer class is linked to the NestHost attribute:

assertThat(MainClass.NestedClass.class.getNestHost()).isEqualTo(MainClass.class);



public class Alphabet {

    private String name = "I'm Alphabet!";

    public class A {
        public void printName() {
            System.out.println(name);       // access Alphabet's private member!
        }
    }

    public class B {
        public void printName() {
            System.out.println(name);       // access Alphabet's private member!
        }

        public class B1 {
            public void printName() {
                System.out.println(name);   // access Alphabet's private member!
            }
        }
    }
}



If we compile the above source, it will generate four classes, Alphabet, Alphabet$A, Alphabet$B, and Alphabet$B.B1, 
even a nested class is a typical class with a unique name.

The JVM access rule will not allow private access within different classes.

However, Java allowed private access within nest members, so the Java compiler creates a bridge method 
access$000 to apply on the JVM access rule.


javac Alphabet.java

Alphabet$A.class
Alphabet$B.class
Alphabet$B.B1.class
Alphabet.class



The source code of the bridge method access is similar to this:


public class Alphabet {
  private String name = "I'm Alphabet!";
  String access$000(){
    return name;
  }
}

public class Alphabet$A {
  final Alphabet obj;
  public void printName(){
    System.out.println(obj.access$000());
  }
}

public class Alphabet$B {
  final Alphabet obj;
  public void printName(){
    System.out.println(obj.access$000());
  }
}

public class Alphabet$B$B1 {
  final Alphabet$B this$1;
  public void printName(){
    System.out.println(obj.access$000());
  }
}



 In Java 11, it supports private access within nest members directly, with NO bridge method.
-------------------------------------------------------------------------------------------

Some new APIs to validate the nested members.

    getNestHost
    getNestMembers
    isNestmateOf


import java.util.Arrays;

public class Alphabet {

    private String name = "I'm Alphabet!";

    public class A {
        public void printName() {
            System.out.println(name);       // access Alphabet's private member!
        }
    }

    public class B {
        public void printName() {
            System.out.println(name);       // access Alphabet's private member!
        }

        public class B1 {
            public void printName() {
                System.out.println(name);   // access Alphabet's private member!
            }
        }
    }

    public static void main(String[] args) {

        A objA = new Alphabet().new A();
        objA.printName();

        B objB = new Alphabet().new B();
        objB.printName();

        B.B1 objB1 = new Alphabet().new B().new B1();
        objB1.printName();

        System.out.println(Alphabet.class.getNestHost());       // Alphabet
        System.out.println(A.class.getNestHost());              // Alphabet
        System.out.println(B.class.getNestHost());              // Alphabet
        System.out.println(B.B1.class.getNestHost());           // Alphabet!, not B

        System.out.println("---");

        System.out.println(Arrays.toString(Alphabet.class.getNestMembers()));   // Alphabet, Alphabet$A, Alphabet$B, Alphabet$B$B1
        System.out.println(Arrays.toString(A.class.getNestMembers()));          // Alphabet, Alphabet$A, Alphabet$B, Alphabet$B$B1
        System.out.println(Arrays.toString(B.class.getNestMembers()));          // Alphabet, Alphabet$A, Alphabet$B, Alphabet$B$B1
        System.out.println(Arrays.toString(B.B1.class.getNestMembers()));       // Alphabet, Alphabet$A, Alphabet$B, Alphabet$B$B1

        System.out.println("---");

        System.out.println(Alphabet.class.isNestmateOf(Alphabet.class));        // true
        System.out.println(Alphabet.class.isNestmateOf(A.class));               // true
        System.out.println(Alphabet.class.isNestmateOf(B.class));               // true
        System.out.println(Alphabet.class.isNestmateOf(B.B1.class));            // true

        System.out.println("---");

        System.out.println(A.class.isNestmateOf(Alphabet.class));               // true
        System.out.println(A.class.isNestmateOf(A.class));                      // true
        System.out.println(A.class.isNestmateOf(B.class));                      // true
        System.out.println(A.class.isNestmateOf(B.B1.class));                   // true

        System.out.println("---");

        System.out.println(B.class.isNestmateOf(Alphabet.class));               // true
        System.out.println(B.class.isNestmateOf(A.class));                      // true
        System.out.println(B.class.isNestmateOf(B.class));                      // true
        System.out.println(B.class.isNestmateOf(B.B1.class));                   // true

        System.out.println("---");

        System.out.println(B.B1.class.isNestmateOf(Alphabet.class));            // true
        System.out.println(B.B1.class.isNestmateOf(A.class));                   // true
        System.out.println(B.B1.class.isNestmateOf(B.class));                   // true
        System.out.println(B.B1.class.isNestmateOf(B.B1.class));                // true

    }
}



10. ifPresentOrElse() method in Optional class in java9
-------------------------------------------------------

public void ifPresentOrElse(Consumer<? super T> action, Runnable emptyAction)

If a value is present, performs the given action with the value, otherwise performs the given empty-based action.

public class Tester {
   public static void main(String[] args) {
      Optional<Integer> optional = Optional.of(1);

      optional.ifPresentOrElse( x -> System.out.println("Value: " + x),() -> 
         System.out.println("Not Present."));  // prints 1 since value is present

      optional = Optional.empty();

      optional.ifPresentOrElse( x -> System.out.println("Value: " + x),() -> 
         System.out.println("Not Present."));  // prints Not Present since no value for optional variable
   }  
}


orElseThrow()
--------------

java.util.Optional, java.util.OptionalDouble, java.util.OptionalIntand java.util.OptionalLongeach 
got a new method orElseThrow()which doesn't take any argument and throws NoSuchElementExceptionif no value is present:


Integer firstEven = someIntList.stream()
      .filter(i -> i % 2 == 0)
      .findFirst()
      .orElseThrow();
    is(firstEven).equals(Integer.valueOf(2));




isEmpty() method in Optional Class
--------------------------------------

Java 11 introduced new method to Optional class as isEmpty() to check if value is present. 
isEmpty() returns false if value is present otherwise true.


import java.util.Optional;

public class APITester {
   public static void main(String[] args) {		
      String name = null;

      System.out.println(!Optional.ofNullable(name).isPresent());
      System.out.println(Optional.ofNullable(name).isEmpty());

      name = "Joe";
      System.out.println(!Optional.ofNullable(name).isPresent());
      System.out.println(Optional.ofNullable(name).isEmpty());
   }
}





10. Removed and Deprecated Modules
----------------------------------

Java 9 already deprecated selected Java EE and CORBA modules. 
In release 11, it has now completely removed:

    a. Java API for XML-Based Web Services (java.xml.ws)
    b. Java Architecture for XML Binding (java.xml.bind)
    c. JavaBeans Activation Framework (java.activation)
    d. Common Annotations (java.xml.ws.annotation)
    e. Common Object Request Broker Architecture (java.corba)
    f. JavaTransaction API (java.transaction)
    g. Java 11 removed Applet API, which got deprecated in Java 9 for security reasons.


Deprecated Modules
------------------

    Nashorn JavaScript engine, including the JJS tool
    Pack200 compression scheme for JAR files













